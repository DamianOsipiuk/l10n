{"version":3,"sources":["l10n.mjs"],"names":["l10n","translations","Object","keys","forEach","loc","catalogs","msgid","locale","language","tl","getEntry","xl","context","nl","msgidPlural","amount","entry","getPluralMessageIdx","t","x","n","setLocale","_init","substr","document","addEventListener","ev","detail","navigator","getLocale","pluralCallbacks","undefined","Function","plurals","_default","ak","am","ar","arn","ay","be","bo","br","bs","cs","csb","cy","dz","fa","fil","fr","ga","gun","hr","hy","id","ja","jv","ka","km","ko","kw","ky","ln","lo","lt","lv","mg","mi","mk","ms","mt","nso","pl","pt","ro","ru","sk","sl","sr","su","th","ti","tr","uk","uz","vi","wa","zh"],"mappings":";AAiIA,aAjIe,SAASA,EAAKC,GACzBC,OAAOC,KAAKF,GAAcG,QAAQ,SAAAC,GAC9BC,EAASD,GAAOC,EAASD,IAAQ,GACjCH,OAAOC,KAAKF,EAAaI,IAAMD,QAAQ,SAAAG,GAASD,OAAAA,EAASD,GAAKE,GAASN,EAAaI,GAAKE,OA4GjG,IAAIC,EAAQC,EAkBZ,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAnHAT,EAAKU,GAAK,SAACH,EAAOF,GAAQM,OAAAA,EAASJ,EAAOF,IAAQE,GAkBlDP,EAAKY,GAAK,SAACC,EAASN,EAAOF,GAAQM,OAAAA,EAASE,EAAU,IAAWN,EAAOF,IAAQE,GAmBhFP,EAAKc,GAAK,SAACP,EAAOQ,EAAaC,EAAQX,GAC7BY,IAAAA,EAAQN,EAASJ,EAAOF,GACrBY,OAAAA,GAASA,EAAM,IAAMA,EAAM,GAAMA,EAAMC,EAAoBF,IAAuB,IAAXA,EAAeT,EAAQQ,GAS3Gf,EAAKmB,EAAInB,EAAKU,GAiBdV,EAAKoB,EAAIpB,EAAKY,GAkBdZ,EAAKqB,EAAIrB,EAAKc,GAEdd,EAAKsB,UAAY,SAACjB,EAAKkB,GAEnBd,GADAD,EAASH,GACSmB,OAAO,EAAG,IAMhCC,SAASC,iBAAiB,kBAAmB,SAAAC,GAAM3B,OAAAA,EAAKsB,UAAUK,EAAGC,OAAOpB,UAM5ER,EAAKsB,UAAUO,UAAUpB,UAAU,GACnCT,EAAK8B,UAAY,WAAMtB,OAAAA,GAEvB,IAAIF,EAAW,GACXyB,EAAkB,GAClBpB,EAAW,SAACJ,EAAOF,GAAQC,OAAAA,EAASD,GAAOG,GAAUF,EAASD,GAAOG,GAAQD,QAASyB,GAEtFd,EAAsB,SAAAF,GAKfe,OAJFA,EAAgBtB,KAEjBsB,EAAgBtB,GAAY,IAAIwB,SAAS,IAAgBC,WAAAA,OAAAA,EAAQzB,IAAayB,EAAQC,SAAtF,WAEGJ,EAAgBtB,GAAUO,IAIjCkB,EAAU,CACVC,SAAS,OACTC,GAAG,MACHC,GAAG,MACHC,GAAG,wFACHC,IAAI,MACJC,GAAG,IACHC,GAAG,yEACHC,GAAG,IACHC,GAAG,MACHC,GAAG,yEACHC,GAAG,8BACHC,IAAI,2DACJC,GAAG,0CACHC,GAAG,IACHC,GAAG,IACHC,IAAI,MACJC,GAAG,MACHC,GAAG,6CACHC,IAAI,MACJC,GAAG,yEACHC,GAAG,IACHC,GAAG,IACHC,GAAG,IACHC,GAAG,OACHC,GAAG,IACHC,GAAG,IACHC,GAAG,IACHC,GAAG,mCACHC,GAAG,IACHC,GAAG,MACHC,GAAG,IACHC,GAAG,gEACHC,GAAG,sCACHC,GAAG,MACHC,GAAG,MACHC,GAAG,sBACHC,GAAG,IACHC,GAAG,sEACHC,IAAI,MACJC,GAAG,2DACHC,GAAG,MACHC,GAAG,6CACHC,GAAG,yEACHC,GAAG,8BACHC,GAAG,yDACHC,GAAG,yEACHC,GAAG,IACHC,GAAG,IACHC,GAAG,MACHC,GAAG,IACHC,GAAG,yEACHC,GAAG,IACHC,GAAG,IACHC,GAAG,MACHC,GAAG","file":"l10n.js","sourceRoot":"","sourcesContent":["export default function l10n(translations) {\n    Object.keys(translations).forEach(loc => {\n        catalogs[loc] = catalogs[loc] || {};\n        Object.keys(translations[loc]).forEach(msgid => catalogs[loc][msgid] = translations[loc][msgid]);\n    })\n}\n\n/**\n * Translates a string into the given locale.\n *\n * @param  string msgid the message to translate\n * @param  string loc the target locale\n * @return string the translated message, or, if there is no translation, the original message\n */\nl10n.tl = (msgid, loc) => getEntry(msgid, loc) || msgid\n\n/**\n * Translates a string in a certain context into the given locale.\n *\n * This is useful when two original strings have different meanings and will most\n * likely require different translations.\n *\n * For example, in a financial context, the English word “amount” would translate\n * to the German „Betrag“, while in a context where items are counted, the German\n * translation would be „Anzahl“. Prefixing the translation with a context allows\n * translators to add both translations.\n *\n * @param  string context the context\n * @param  string msgid the message to translate\n * @param  string loc the target locale\n * @return string the translated message, or, if there is no translation, the original message\n */\nl10n.xl = (context, msgid, loc) => getEntry(context + \"\\u0004\" + msgid, loc) || msgid;\n\n/**\n * Translates a pluralized string in a certain context into the given locale.\n *\n * This function uses “pluralisation rules” to determine the correct form in the target\n * language. For example, many languages have more than two plural forms, and this\n * function will select the correct one.\n *\n * NOTE: This function will not fill in the value into the placeholder in the\n * plural form, but only return the correct message. You must either use something like\n * sprintf() or some other replacement implementation, e.g. `msg.replace(\"%s\", value)`.\n *\n * @param  string msgid the message to translate, singular form\n * @param  string msgidPlural the message to translate, plural form\n * @param  integer amount number to use to determine the correct plural form\n * @param  string loc the target locale\n * @return string the translated message, or, if there is no translation, the original message\n */\nl10n.nl = (msgid, msgidPlural, amount, loc) => {\n    const entry = getEntry(msgid, loc)\n    return  (entry && entry[0] && entry[1]) ? entry[getPluralMessageIdx(amount)] : (amount === 1 ? msgid : msgidPlural)\n}\n\n/**\n * Translates a string into the currently set locale.\n *\n * @param  string msgid the message to translate\n * @return string the translated message, or, if there is no translation, the original message\n */\nl10n.t = l10n.tl\n\n/**\n * Translates a string in a certain context into the currently set locale.\n *\n * This is useful when two original strings have different meanings and will most\n * likely require different translations.\n *\n * For example, in a financial context, the English word “amount” would translate\n * to the German „Betrag“, while in a context where items are counted, the German\n * translation would be „Anzahl“. Prefixing the translation with a context allows\n * translators to add both translations.\n *\n * @param  string context the context\n * @param  string msgid the message to translate\n * @return string the translated message, or, if there is no translation, the original message\n */\nl10n.x = l10n.xl\n\n/**\n * Translates a pluralized string in a certain context into the currently set locale.\n *\n * This function uses “pluralisation rules” to determine the correct form in the target\n * language. For example, many languages have more than two plural forms, and this\n * function will select the correct one.\n *\n * NOTE: This function will not fill in the value into the placeholder in the\n * plural form, but only return the correct message. You must either use something like\n * sprintf() or some other replacement implementation, e.g. `msg.replace(\"%s\", value)`.\n *\n * @param  string msgid the message to translate, singular form\n * @param  string msgidPlural the message to translate, plural form\n * @param  integer amount number to use to determine the correct plural form\n * @return string the translated message, or, if there is no translation, the original message\n */\nl10n.n = l10n.nl\n\nl10n.setLocale = (loc, _init) => {\n    locale = loc;\n    language = locale.substr(0, 2);\n\n    // disabled for now, because it doesn't work in ES5\n    // _init || document.dispatchEvent(new CustomEvent(\"l10n.locale.switch\", { detail : { locale } }));\n};\n\ndocument.addEventListener(\"l10n.locale.set\", ev => l10n.setLocale(ev.detail.locale));\n\n// private\n\nlet locale, language;\n\nl10n.setLocale(navigator.language, true);\nl10n.getLocale = () => locale;\n\nlet catalogs = {};\nlet pluralCallbacks = {};\nlet getEntry = (msgid, loc) => catalogs[loc || locale] ? catalogs[loc || locale][msgid] : undefined;\n\nlet getPluralMessageIdx = amount => {\n    if (!pluralCallbacks[language])\n        /*jshint evil:true */\n        pluralCallbacks[language] = new Function(\"n\", `return (${plurals[language] || plurals._default}) | 0`);\n\n    return pluralCallbacks[language](amount);\n};\n\n// Gettext pluralisation rules for many languages\nlet plurals = {\n    _default:\"n!=1\",\n    ak:\"n>1\",\n    am:\"n>1\",\n    ar:\"(n==0)?0:((n==1)?1:((n==2)?2:((n%100>=3&&n%100<=10)?3:((n%100>=11&&n%100<=99)?4:5))))\",\n    arn:\"n>1\",\n    ay:\"0\",\n    be:\"(n%10==1&&n%100!=11)?0:((n%10>=2&&n%10<=4&&(n%100<10||n%100>=20))?1:2)\",\n    bo:\"0\",\n    br:\"n>1\",\n    bs:\"(n%10==1&&n%100!=11)?0:((n%10>=2&&n%10<=4&&(n%100<10||n%100>=20))?1:2)\",\n    cs:\"(n==1)?0:((n>=2&&n<=4)?1:2)\",\n    csb:\"(n==1)?0:((n%10>=2&&n%10<=4&&(n%100<10||n%100>=20))?1:2)\",\n    cy:\"(n==1)?0:((n==2)?1:((n!=8&&n!=11)?2:3))\",\n    dz:\"0\",\n    fa:\"0\",\n    fil:\"n>1\",\n    fr:\"n>1\",\n    ga:\"(n==1)?0:((n==2)?1:((n<7)?2:((n<11)?3:4)))\",\n    gun:\"n>1\",\n    hr:\"(n%10==1&&n%100!=11)?0:((n%10>=2&&n%10<=4&&(n%100<10||n%100>=20))?1:2)\",\n    hy:\"0\",\n    id:\"0\",\n    ja:\"0\",\n    jv:\"n!=0\",\n    ka:\"0\",\n    km:\"0\",\n    ko:\"0\",\n    kw:\"(n==1)?0:((n==2)?1:((n==3)?2:3))\",\n    ky:\"0\",\n    ln:\"n>1\",\n    lo:\"0\",\n    lt:\"(n%10==1&&n%100!=11)?0:((n%10>=2&&(n%100<10||n%100>=20))?1:2)\",\n    lv:\"(n%10==1&&n%100!=11)?0:((n!=0)?1:2)\",\n    mg:\"n>1\",\n    mi:\"n>1\",\n    mk:\"(n==1||n%10==1)?0:1\",\n    ms:\"0\",\n    mt:\"(n==1)?0:((n==0||(n%100>1&&n%100<11))?1:((n%100>10&&n%100<20)?2:3))\",\n    nso:\"n>1\",\n    pl:\"(n==1)?0:((n%10>=2&&n%10<=4&&(n%100<10||n%100>=20))?1:2)\",\n    pt:\"n>1\",\n    ro:\"(n==1)?0:((n==0||(n%100>0&&n%100<20))?1:2)\",\n    ru:\"(n%10==1&&n%100!=11)?0:((n%10>=2&&n%10<=4&&(n%100<10||n%100>=20))?1:2)\",\n    sk:\"(n==1)?0:((n>=2&&n<=4)?1:2)\",\n    sl:\"(n%100==1)?0:((n%100==2)?1:((n%100==3||n%100==4)?2:3))\",\n    sr:\"(n%10==1&&n%100!=11)?0:((n%10>=2&&n%10<=4&&(n%100<10||n%100>=20))?1:2)\",\n    su:\"0\",\n    th:\"0\",\n    ti:\"n>1\",\n    tr:\"0\",\n    uk:\"(n%10==1&&n%100!=11)?0:((n%10>=2&&n%10<=4&&(n%100<10||n%100>=20))?1:2)\",\n    uz:\"0\",\n    vi:\"0\",\n    wa:\"n>1\",\n    zh:\"0\"\n};\n"]}